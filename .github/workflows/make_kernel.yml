name: make kernel

on:
  workflow_dispatch:

    inputs:
      KERNEL_SOURCE:
        description: 'Kernel Source'
        required: true
        default: ''
        
      KERNEL_SOURCE_BRANCH:
        description: 'Branch'
        required: true
        default: 'rvc'
        
      KERNEL_DEFCONFIG:
        description: 'Defconfig'
        required: true
        default: 'vendor/kona-perf_defconfig'

      CLANG_URL:
        description: 'Clang URL'
        required: true
        default: 'https://github.com/ZyCromerZ/Clang/releases/download/14.0.6-20230213-release/Clang-14.0.6-20230213.tar.gz'
        
      USE_KERNELSU:
        description: 'Use KernelSU'
        required: true
        default: 'true'
        type: boolean


jobs:
  build:
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v3

    - name: 配置环境
      run: |
        echo "BUILD_TIME=$(TZ=Asia/Shanghai date "+%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "DEVICE=$(echo ${{ github.event.inputs.KERNEL_DEFCONFIG }} | sed 's!vendor/!!;s/_defconfig//;s/_user//;s/-perf//')" >> $GITHUB_ENV
        sudo apt-get update
        sudo apt-get install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python2 python3

    - name: 下载clang和内核源码
      run: |
        mkdir clang
        aria2c -j10 ${{ github.event.inputs.CLANG_URL }} -o clang.tar.gz
        tar -C clang/ -zxf clang.tar.gz
        git clone --depth=1 ${{ github.event.inputs.KERNEL_SOURCE }} -b ${{ github.event.inputs.KERNEL_SOURCE_BRANCH }} android-kernel

    - name: 安装kernelSU
      if: github.event.inputs.USE_KERNELSU == 'true'
      run: |
        cd android-kernel
        git apply ../KernelSU.patch
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -
            
    - name: 编译内核
      run: |
        cd android-kernel
        export CLANG_PATH=$GITHUB_WORKSPACE/clang
        export PATH=${CLANG_PATH}/bin:${PATH}
        export CLANG_TRIPLE=aarch64-linux-gnu-
        export ARCH=arm64
        export SUBARCH=arm64
        export KBUILD_COMPILER_STRING="$(clang --version | head -n 1 )"
        export KBUILD_BUILD_HOST=zhlhlf_linux
        export KBUILD_BUILD_USER=zhlhlf
        make O=out CC="ccache clang" CXX="ccache clang++" ARCH=arm64 CROSS_COMPILE=$CLANG_PATH/bin/aarch64-linux-gnu- CROSS_COMPILE_ARM32=$CLANG_PATH/bin/arm-linux-gnueabi- LD=ld.lld ${{ github.event.inputs.KERNEL_DEFCONFIG }}
        echo "----------------------------"
        sed s/CONFIG_LOCALVERSION=".*"/'CONFIG_LOCALVERSION="-perf-ksu-zhlhlf"'/g out/.config >>.config1
        rm -rf out/.config
        #echo -e "CONFIG_KPROBES=y\nCONFIG_HAVE_KPROBES=y\nCONFIG_KPROBE_EVENTS=y" >>.config1
        mv .config1 out/.config
        cat out/.config
        echo "----------------------------"        
        make O=out -j$(nproc --all) CC="ccache clang" CXX="ccache clang++" ARCH=arm64 CROSS_COMPILE=$CLANG_PATH/bin/aarch64-linux-gnu- CROSS_COMPILE_ARM32=$CLANG_PATH/bin/arm-linux-gnueabi- LD=ld.lld 2>&1 | tee kernel.log               
        echo "----------------------"
        echo "----------------------"
        
    - name: 准备打包内核
      run: |
        cd android-kernel
        git clone https://github.com/osm0sis/AnyKernel3
        sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
        sed -i 's!block=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!block=/dev/block/bootdevice/by-name/boot;!g' AnyKernel3/anykernel.sh
        sed -i 's/is_slot_device=1;/is_slot_device=0;/g' AnyKernel3/anykernel.sh
        cp android-kernel/out/arch/arm64/boot/Image.gz-dtb AnyKernel3/
        rm -rf AnyKernel3/.git* AnyKernel3/README.md
        rm -rf AnyKernel3/ramdisk AnyKernel3/modules AnyKernel3/patch
    
    
    - name: 打包并上传
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.KERNEL_ZIP_NAME }}
        path: kernel_workspace/AnyKernel3/*
